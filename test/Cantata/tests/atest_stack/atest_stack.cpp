/*****************************************************************************/
/*                            Cantata Test Script                            */
/*****************************************************************************/
/*
 *    Filename: atest_stack.cpp
 *    Author: PMN-GNC
 *    Generated on: 11-Feb-2022 15:45:10
 *    Generated from: stack.cpp
 */
/*****************************************************************************/
/* Environment Definition                                                    */
/*****************************************************************************/

#define TEST_SCRIPT_GENERATOR 2

/* Include files from software under test */
#include "../../../stack.h"

#define CANTATA_DEFAULT_VALUE 0 /* Default value of variables & stub returns */

#include <cantpp.h>  /* Cantata Directives */
/* pragma qas cantata testscript start */
/*****************************************************************************/
/* Global Data Definitions                                                   */
/*****************************************************************************/

/* Global Functions */
/* None */

/* Global data */
Stack::node map_stack_head[1]; /* Generated by Cantata */
Stack::node map_operator_new_call1[1]; /* Generated by Cantata */
Stack::node map_testObj_head[1]; /* Generated by Cantata */

/* Expected variables for global data */
Stack::node expected_map_stack_head[1];
Stack::node expected_map_operator_new_call1[1];
Stack::node expected_map_testObj_head[1];

/* This function initialises global data to default values. This function       */
/* is called by every test case so must not contain test case specific settings */
static void initialise_global_data(){
    INITIALISE(map_stack_head);
    INITIALISE(map_operator_new_call1);
    INITIALISE(map_testObj_head);
}

/* This function copies the global data settings into expected variables for */
/* use in check_global_data(). It is called by every test case so must not   */
/* contain test case specific settings.                                      */
static void initialise_expected_global_data(){
    COPY_TO_EXPECTED(map_stack_head, expected_map_stack_head);
    COPY_TO_EXPECTED(map_operator_new_call1, expected_map_operator_new_call1);
    COPY_TO_EXPECTED(map_testObj_head, expected_map_testObj_head);
}

/* This function checks global data against the expected values. */
static void check_global_data(){
    CHECK_MEMORY("map_stack_head", map_stack_head, expected_map_stack_head, sizeof(expected_map_stack_head));
    CHECK_MEMORY("map_operator_new_call1", map_operator_new_call1, expected_map_operator_new_call1, sizeof(expected_map_operator_new_call1));
    CHECK_MEMORY("map_testObj_head", map_testObj_head, expected_map_testObj_head, sizeof(expected_map_testObj_head));
}

/*****************************************************************************/
/* Test class declaration                                                    */
/*****************************************************************************/
class TEST_CLASS(stack)
{
public:
    void run_tests();
    void test_1(int);
    void test_2(int);
    void test_3(int);
    void test_4(int);
    void test_5(int);
    void test_6(int);
    void test_7(int);
    void test_8(int);
};

/*****************************************************************************/
/* Coverage Analysis                                                         */
/*****************************************************************************/
/* Coverage Rule Set: 100% Entry Point + Statement + Call Return + Decision + MC/DC Coverage */
static void rule_set(char* cppca_sut,
                     char* cppca_context)
{
    START_TEST("COVERAGE RULE SET",
               "100% Entry Point + Statement + Call Return + Decision + MC/DC Coverage");
#ifdef CANTPP_SUBSET_DEFERRED_ANALYSIS
    TEST_SCRIPT_WARNING("Coverage Rule Set ignored in deferred analysis mode\n");
#elif CANTPP_COVERAGE_INSTRUMENTATION_DISABLED
    TEST_SCRIPT_WARNING("Coverage Instrumentation has been disabled\n");
#elif CANTPP_INSTRUMENTATION_DISABLED
    TEST_SCRIPT_WARNING("Instrumentation has been disabled\n");
#else
    ANALYSIS_CHECK("100% Entry Point Coverage",
                   cppca_entrypoint_cov,
                   100.0);
    
    ANALYSIS_CHECK("100% Statement Coverage",
                   cppca_statement_cov,
                   100.0);
    
    ANALYSIS_CHECK("100% Call Return Coverage",
                   cppca_callreturn_cov,
                   100.0);
    
    ANALYSIS_CHECK("100% Decision Coverage",
                   cppca_decision_cov,
                   100.0);
    
    ANALYSIS_CHECK("100% Boolean Operand Effectiveness Coverage",
                   cppca_booleff_cov,
                   100.0);
    
    REPORT_COVERAGE(cppca_entrypoint_cov|
                    cppca_statement_cov|
                    cppca_callreturn_cov|
                    cppca_decision_cov|
                    cppca_booleff_cov,
                    cppca_sut,
                    cppca_all_details|cppca_include_catch,
                    cppca_context);
#endif
    END_TEST();
}

/*****************************************************************************/
/* Program Entry Point                                                       */
/*****************************************************************************/
int main()
{
    CONFIGURE_COVERAGE("cov:boolcomb:yes");
    OPEN_LOG("atest_stack.ctr", false, 100);
    START_SCRIPT("stack", true);

    TEST_CLASS(stack) test_object;
    test_object.run_tests();

    return !END_SCRIPT(true);
}

/*****************************************************************************/
/* Test Control                                                              */
/*****************************************************************************/
/* run_tests() contains calls to the individual test cases, you can turn test*/
/* cases off by adding comments*/
void TEST_CLASS(stack)::run_tests()
{
    test_1(1);
    test_2(1);
    test_3(1);
    test_4(1);
    test_5(1);
    test_6(1);
    test_7(1);
    test_8(1);

    rule_set("*", "*");
    EXPORT_COVERAGE("atest_stack.cov", cppca_export_replace);
}

/*****************************************************************************/
/* Test Cases                                                                */
/*****************************************************************************/

void TEST_CLASS(stack)::test_1(int doIt){
if (doIt) {
    START_TEST("1: Stack",
               "default case");

        /* Expected Call Sequence  */
        EXPECTED_CALLS("");
        START_EXCEPTION
            /* Set global data */
            initialise_global_data();
            /* Set expected values for global data checks */
            initialise_expected_global_data();
            /* Test case data declarations */
            Stack* returnValue;

            /* Call SUT */
            returnValue = ::new Stack();

            /* Test case checks */
            CHECK_ADDRESS(returnValue->head, NULL);
            /* Checks on global data */
            check_global_data();
        NO_EXCEPTIONS
        END_EXCEPTION
        END_CALLS();
    END_TEST();
}}

void TEST_CLASS(stack)::test_2(int doIt){
if (doIt) {
    START_TEST("2: Stack(const Stack &)",
               "default case");

        /* Expected Call Sequence  */
        EXPECTED_CALLS("");
        START_EXCEPTION
            /* Set global data */
            initialise_global_data();
            /* Set expected values for global data checks */
            initialise_expected_global_data();
            /* Test case data declarations */
            Stack stack;
            Stack* returnValue;
            stack.head = NULL;

            /* Call SUT */
            returnValue = ::new Stack(stack);

            /* Test case checks */
            CHECK_ADDRESS(returnValue->head, NULL);
            CHECK_ADDRESS(stack.head, NULL);
            /* Checks on global data */
            check_global_data();
        NO_EXCEPTIONS
        END_EXCEPTION
        END_CALLS();
    END_TEST();
}}

void TEST_CLASS(stack)::test_3(int doIt){
if (doIt) {
    START_TEST("3: Stack(const Stack &)",
               "created to solve true case of stack_ptr != NULL at line number 31");

        /* Expected Call Sequence  */
        EXPECTED_CALLS("Stack::push(int)#1");
        START_EXCEPTION
            /* Set global data */
            initialise_global_data();
            /* Set expected values for global data checks */
            initialise_expected_global_data();
            /* Test case data declarations */
            Stack stack;
            Stack* returnValue;
            stack.head = &map_stack_head[0];
            map_stack_head[0].next = NULL;
            expected_map_stack_head[0].next = NULL;

            /* Call SUT */
            returnValue = ::new Stack(stack);

            /* Test case checks */
            CHECK_ADDRESS(returnValue->head, NULL);
            CHECK_ADDRESS(stack.head, &map_stack_head[0]);
            /* Checks on global data */
            check_global_data();
        NO_EXCEPTIONS
        END_EXCEPTION
        END_CALLS();
    END_TEST();
}}

void TEST_CLASS(stack)::test_4(int doIt){
if (doIt) {
    START_TEST("4: is_empty",
               "default case");

        /* Expected Call Sequence  */
        EXPECTED_CALLS("");
        START_EXCEPTION
            /* Set global data */
            initialise_global_data();
            /* Set expected values for global data checks */
            initialise_expected_global_data();
            /* Test case data declarations */
            /* Possible constructors for the following test object are: */
            /* Stack::Stack() */
            /* Stack::Stack(const Stack&) */
            /* Note: A call to delete may be required for the created object */
            Stack* testObj = ::new Stack();
            bool returnValue;
            testObj->head = NULL;

            /* Call SUT */
            returnValue = testObj->is_empty();

            /* Test case checks */
            CHECK_ADDRESS(testObj->head, NULL);
            CHECK_BOOLEAN(returnValue, true);
            /* Checks on global data */
            check_global_data();
        NO_EXCEPTIONS
        END_EXCEPTION
        END_CALLS();
    END_TEST();
}}

void TEST_CLASS(stack)::test_5(int doIt){
if (doIt) {
    START_TEST("5: push(int)",
               "default case");

        /* Expected Call Sequence  */
        EXPECTED_CALLS("operator_new(std::size_t)#1");
        START_EXCEPTION
            /* Set global data */
            initialise_global_data();
            /* Set expected values for global data checks */
            initialise_expected_global_data();
            /* Test case data declarations */
            /* Possible constructors for the following test object are: */
            /* Stack::Stack() */
            /* Stack::Stack(const Stack&) */
            /* Note: A call to delete may be required for the created object */
            Stack* testObj = ::new Stack();
            int value = 0;
            testObj->head = NULL;
            expected_map_operator_new_call1[0].data = 0;
            expected_map_operator_new_call1[0].next = NULL;

            /* Call SUT */
            testObj->push(value);

            /* Test case checks */
            CHECK_ADDRESS(testObj->head, &map_operator_new_call1[0]);
            /* Checks on global data */
            check_global_data();
        NO_EXCEPTIONS
        END_EXCEPTION
        END_CALLS();
    END_TEST();
}}

void TEST_CLASS(stack)::test_6(int doIt){
if (doIt) {
    START_TEST("6: push(int)",
               "created to solve catch handler at line number 73");

        /* Expected Call Sequence  */
        EXPECTED_CALLS("operator_new(std::size_t)#2");
        START_EXCEPTION
            /* Set global data */
            initialise_global_data();
            /* Set expected values for global data checks */
            initialise_expected_global_data();
            /* Test case data declarations */
            /* Possible constructors for the following test object are: */
            /* Stack::Stack() */
            /* Stack::Stack(const Stack&) */
            /* Note: A call to delete may be required for the created object */
            Stack* testObj = ::new Stack();
            int value = 0;
            testObj->head = NULL;

            /* Call SUT */
            testObj->push(value);

            /* Test case checks */
            CHECK_ADDRESS(testObj->head, NULL);
            /* Checks on global data */
            check_global_data();
        EXPECT_EXCEPTION(Stack::new_error thrownValue)
        END_EXCEPTION
        END_CALLS();
    END_TEST();
}}

void TEST_CLASS(stack)::test_7(int doIt){
if (doIt) {
    START_TEST("7: pop",
               "default case");

        /* Expected Call Sequence  */
        EXPECTED_CALLS("Stack::is_empty()#1;operator_delete(void *)#1");
        START_EXCEPTION
            /* Set global data */
            initialise_global_data();
            /* Set expected values for global data checks */
            initialise_expected_global_data();
            /* Test case data declarations */
            /* Possible constructors for the following test object are: */
            /* Stack::Stack() */
            /* Stack::Stack(const Stack&) */
            /* Note: A call to delete may be required for the created object */
            Stack* testObj = ::new Stack();
            int returnValue;
            map_testObj_head[0].data = 0;
            map_testObj_head[0].next = NULL;
            expected_map_testObj_head[0].next = NULL;
            testObj->head = &map_testObj_head[0];
            expected_map_testObj_head[0].data = 0;

            /* Call SUT */
            returnValue = testObj->pop();

            /* Test case checks */
            CHECK_ADDRESS(testObj->head, NULL);
            CHECK_S_INT(returnValue, 0);
            /* Checks on global data */
            check_global_data();
        NO_EXCEPTIONS
        END_EXCEPTION
        END_CALLS();
    END_TEST();
}}

void TEST_CLASS(stack)::test_8(int doIt){
if (doIt) {
    START_TEST("8: pop",
               "created to solve true case of is_empty() at line number 84");

        /* Expected Call Sequence  */
        EXPECTED_CALLS("Stack::is_empty()#2");
        START_EXCEPTION
            /* Set global data */
            initialise_global_data();
            /* Set expected values for global data checks */
            initialise_expected_global_data();
            /* Test case data declarations */
            /* Possible constructors for the following test object are: */
            /* Stack::Stack() */
            /* Stack::Stack(const Stack&) */
            /* Note: A call to delete may be required for the created object */
            Stack* testObj = ::new Stack();
            int returnValue;

            /* Call SUT */
            returnValue = testObj->pop();

            /* Test case checks */
            /* Checks on global data */
            check_global_data();
        EXPECT_EXCEPTION(Stack::empty_pop thrownValue)
        END_EXCEPTION
        END_CALLS();
    END_TEST();
}}

/*****************************************************************************/
/* Call Interface Control                                                    */
/*****************************************************************************/
#pragma qas cantata ignore on

/* Before-Wrapper for function Stack::push */
bool BEFORE_Stack::push(Stack *& cppsm_this_object,
                        int& value){
    REGISTER_CALL("Stack::push(int)");

    IF_INSTANCE("1") {
        CHECK_S_INT(value, 0);
        return REPLACE_WRAPPER;
    }

    LOG_SCRIPT_ERROR("Call instance not defined.");
    return AFTER_WRAPPER;
}

/* After-Wrapper for function Stack::push */
void AFTER_Stack::push(cppsm_void_return cppsm_dummy,
                       Stack * const& cppsm_this_object,
                       const int& value){

    LOG_SCRIPT_ERROR("Call instance not defined.");
    return;
}

/* Replace-Wrapper for function Stack::push */
void REPLACE_Stack::push(Stack *& cppsm_this_object,
                         const int& value){

    IF_INSTANCE("1") {
        return;
    }
    LOG_SCRIPT_ERROR("Call instance not defined.");
    return;
}

/* Before-Wrapper for function operator new */
bool BEFORE_operator_new(std::size_t& cppsm_size) throw (std::bad_alloc){
    REGISTER_CALL("operator_new(std::size_t)");

    IF_INSTANCE("1") {
        CHECK_U_INT(cppsm_size, 8U);
        return REPLACE_WRAPPER;
    }
    IF_INSTANCE("2") {
        CHECK_U_INT(cppsm_size, 8U);
        return REPLACE_WRAPPER;
    }

    LOG_SCRIPT_ERROR("Call instance not defined.");
    return AFTER_WRAPPER;
}

/* After-Wrapper for function operator new */
void * AFTER_operator_new(void * cppsm_return_value,
                          const std::size_t& cppsm_size) throw (std::bad_alloc){
    void * returnValue;

    LOG_SCRIPT_ERROR("Call instance not defined.");
    return cppsm_return_value;
}

/* Replace-Wrapper for function operator new */
void * REPLACE_operator_new(const std::size_t& cppsm_size) throw (std::bad_alloc){
    void * returnValue;

    IF_INSTANCE("1") {
        returnValue = &map_operator_new_call1[0];
        return returnValue;
    }
    IF_INSTANCE("2") {
        std::bad_alloc thrownValue;
        throw thrownValue;
    }
    LOG_SCRIPT_ERROR("Call instance not defined.");
    return returnValue;
}

/* Before-Wrapper for function Stack::is_empty */
bool BEFORE_Stack::is_empty(Stack *& cppsm_this_object){
    REGISTER_CALL("Stack::is_empty()");

    IF_INSTANCE("1") {
        return REPLACE_WRAPPER;
    }
    IF_INSTANCE("2") {
        return REPLACE_WRAPPER;
    }

    LOG_SCRIPT_ERROR("Call instance not defined.");
    return AFTER_WRAPPER;
}

/* After-Wrapper for function Stack::is_empty */
bool AFTER_Stack::is_empty(bool cppsm_return_value,
                           Stack * const& cppsm_this_object){
    bool returnValue;

    LOG_SCRIPT_ERROR("Call instance not defined.");
    return cppsm_return_value;
}

/* Replace-Wrapper for function Stack::is_empty */
bool REPLACE_Stack::is_empty(Stack *& cppsm_this_object){
    bool returnValue;

    IF_INSTANCE("1") {
        returnValue = false;
        return returnValue;
    }
    IF_INSTANCE("2") {
        returnValue = true;
        return returnValue;
    }
    LOG_SCRIPT_ERROR("Call instance not defined.");
    return returnValue;
}

/* Before-Wrapper for function operator delete */
bool BEFORE_operator_delete(void *& param_1) throw (){
    REGISTER_CALL("operator_delete(void *)");

    IF_INSTANCE("1") {
        CHECK_ADDRESS(param_1, &map_testObj_head[0].data);
        CHECK_S_INT((*((Stack::node*) param_1)).data, 0);
        CHECK_ADDRESS((*((Stack::node*) param_1)).next, NULL);
        return REPLACE_WRAPPER;
    }

    LOG_SCRIPT_ERROR("Call instance not defined.");
    return AFTER_WRAPPER;
}

/* After-Wrapper for function operator delete */
void AFTER_operator_delete(void * const& param_1) throw (){

    LOG_SCRIPT_ERROR("Call instance not defined.");
    return;
}

/* Replace-Wrapper for function operator delete */
void REPLACE_operator_delete(void * const& param_1) throw (){

    IF_INSTANCE("1") {
        (*((Stack::node*) param_1)).data = 0;
        return;
    }
    LOG_SCRIPT_ERROR("Call instance not defined.");
    return;
}

#pragma qas cantata ignore off
/* pragma qas cantata testscript end */
/*****************************************************************************/
/* End of test script                                                        */
/*****************************************************************************/
